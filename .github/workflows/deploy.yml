name: Build & Deploy Touhou Player

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Generate tracks.json & images.json
        run: |
          mkdir -p data
          node --input-type=module - <<'NODE'
          import fs from 'fs';
          import path from 'path';

          const musicRoot = path.join(process.cwd(),'music');
          const dataDir   = path.join(process.cwd(),'data');
          const exts = new Set(['.mp3','.ogg','.wav','.m4a','.flac']);

          function walk(dir){
            let out = [];
            if (!fs.existsSync(dir)) return out;
            for (const name of fs.readdirSync(dir)){
              if (name.startsWith('.')) continue;
              const p = path.join(dir, name);
              const st = fs.statSync(p);
              if (st.isDirectory()) out = out.concat(walk(p));
              else {
                const ext = path.extname(name).toLowerCase();
                if (exts.has(ext)) out.push(p);
              }
            }
            return out;
          }

          // Áî¢Áîü tracks.json
          let relFiles = [];
          if (fs.existsSync(musicRoot)) {
            relFiles = walk(musicRoot).map(abs =>
              path.posix.join('music', path.relative(musicRoot, abs).split(path.sep).join('/'))
            );
          }
          const tracks = relFiles.map(rel => {
            const base = path.basename(rel).replace(/\.[^.]+$/,'');
            let artist='Unknown', title=base;
            const m = base.split(' - ');
            if (m.length>=2){ artist=m[0]; title=m.slice(1).join(' - '); }
            return { file: rel, title, artist };
          });
          fs.writeFileSync(path.join(dataDir,'tracks.json'), JSON.stringify(tracks,null,2));
          console.log('‚úÖ tracks.json generated:', tracks.length, 'tracks');

          // Áî¢Áîü images.jsonÔºàÂæû tags Êäì DanbooruÔºâ
          const tags = new Set(['touhou']);
          tracks.forEach(t=>tags.add('touhou'));
          const images = {};
          for (const tag of tags) {
            try {
              const url = `https://danbooru.donmai.us/posts.json?limit=30&tags=${encodeURIComponent(tag+' rating:safe order:rank')}`;
              const res = await fetch(url, { headers: { 'User-Agent': 'GitHubActions' }});
              if (!res.ok) throw new Error(res.statusText);
              const arr = await res.json();
              const seen = new Set(); const list=[];
              for (const p of arr) {
                const u = p.large_file_url || p.file_url;
                if (!u || p.rating!=='s') continue;
                const abs = u.startsWith('http') ? u : `https://danbooru.donmai.us${u}`;
                if (seen.has(abs)) continue;
                seen.add(abs);
                list.push({url:abs, source:`post:${p.id}`});
              }
              images[tag]=list;
              console.log(`üñºÔ∏è ${tag}: ${list.length} images`);
              await new Promise(r=>setTimeout(r,300));
            } catch(e){
              console.log('‚ö†Ô∏è image fetch failed for', tag, e.message);
              images[tag]=[];
            }
          }
          fs.writeFileSync(path.join(dataDir,'images.json'), JSON.stringify(images,null,2));
          console.log('‚úÖ images.json generated');
          NODE

      - name: Sanity check
        run: |
          echo "--- data ---"
          ls -l data
          head -n 10 data/tracks.json || true
          head -n 10 data/images.json || true

      - name: Prepare artifact
        run: |
          mkdir -p dist
          shopt -s extglob
          cp -r !(dist|.git|.github) dist/ || true
          cp -r .github dist/.github || true

      - name: Configure Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
